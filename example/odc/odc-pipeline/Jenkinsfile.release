def lastCommit

pipeline {
    agent none

    parameters {
        choice(choices: ['patch', 'minor', 'major'], description: 'Choose the release mode', name: 'RELEASE_MODE')
    }
    stages {
        stage('Bump version') {
            agent any
            steps {
                echo 'Bumping version...'
                // TODO fix git: proper credential handling, branch not hardcoded, ...
                sh '''
                git checkout master
                git branch -u origin/master
                git reset --hard origin/master
                VERSION=$(cat chart/Chart.yaml | grep '^version:' | grep -Eo '[0-9]+\\.[0-9]+\\.[0-9]+')
                INDEX_TO_UPDATE=$(case $RELEASE_MODE in 'patch') echo '3';; 'minor') echo '2';; 'major') echo '1';; esac)
                BUMPED_VERSION=$(echo $VERSION | awk -vFS=. -vOFS=. "{\\$$INDEX_TO_UPDATE++;print}")
                cat chart/Chart.yaml | sed -E "s/^version: .+$/version: $BUMPED_VERSION/" | tee chart/Chart.yaml
                git add .
                GIT_COMMITTER_NAME='Jenkins' GIT_COMMITTER_EMAIL='jenkins@example.com' git commit -m "Update version to $BUMPED_VERSION" --author="Jenkins <jenkins@example.com>"
                git push http://developer:password@git:3000/lt/odc-pipeline
                '''
                script {
                    lastCommit = sh (script:'git rev-parse HEAD', returnStdout: true).trim()
                }
            }
        }
        stage('Package chart') {
            agent {
                docker { 
                    image 'alpine/helm:3.7.2'
                    // TODO fix the network situation here
                    args '-it -u root --net=deploy-pipeline_default --entrypoint=' // hack to keep the container running
                }
            }
            steps {
                echo 'Packaging...'
                sh "git checkout -f ${lastCommit}"
                sh 'whoami'
                sh '''
                    helm repo add helm-hosted http://nexus:8081/repository/helm-hosted/ --username=admin --password=password
                    helm repo update
                    helm dependency update chart
                '''
                sh 'helm package chart -d chart_out'
            }
        }
        stage('Publish chart') {
            agent any
            steps {
                echo 'Publishing...'
                // TODO remove credentials from here
                sh '''
                CHART_FILE=$(find chart_out -name "*.tgz")
                curl -u admin:password http://nexus:8081/repository/helm-hosted/ --upload-file ${CHART_FILE} -v
                '''
                sh 'rm -r chart_out'
            }
        }
    }
}